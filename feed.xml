<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="http://localhost:4000/Blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/Blog/" rel="alternate" type="text/html" /><updated>2017-03-26T14:04:24+08:00</updated><id>http://localhost:4000/Blog/</id><title type="html">thc</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><author><name>唐海宸</name></author><entry><title type="html">第二个</title><link href="http://localhost:4000/Blog/jekyll/2017/03/20/second-post.html" rel="alternate" type="text/html" title="第二个" /><published>2017-03-20T09:28:53+08:00</published><updated>2017-03-20T09:28:53+08:00</updated><id>http://localhost:4000/Blog/jekyll/2017/03/20/second-post</id><content type="html" xml:base="http://localhost:4000/Blog/jekyll/2017/03/20/second-post.html">&lt;h1&gt;第二个&lt;/h1&gt;
&lt;p&gt;This is my first post.Click the link below to go back to index:&lt;/p&gt;
&lt;a href=&quot;/Blog/index.html&quot;&gt;Go back&lt;/a&gt;
&lt;a href=&quot;/Blog/index.html&quot;&gt;33333&lt;/a&gt;

       &lt;li&gt;&lt;a href=&quot;/jekyll/2017/03/20/second-post.html&quot;&gt;第二个&lt;/a&gt;&lt;/li&gt;
   
       &lt;li&gt;&lt;a href=&quot;/jekyll/2017/03/19/first-post.html&quot;&gt;第一个&lt;/a&gt;&lt;/li&gt;
   
       &lt;li&gt;&lt;a href=&quot;/jekyll/2017/03/02/jekyll-install.html&quot;&gt;jekyll安装指南&lt;/a&gt;&lt;/li&gt;
   

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//    将数组中的每一项以对象的属性名和属性值存储起来&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//        cur 数组中的每一项&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//            ary.splice(i,1);             &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//            删除数组的最后一项 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11 &lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//                ary.length-=1;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13 &lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//    ary.length = ary.length-1&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14 &lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//    ary.pop()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15 &lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16 &lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17 &lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18 &lt;/span&gt;           &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//将属性名和属性值 存储到obj里面&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19 &lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21 &lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24 &lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25 &lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26 &lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27 &lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28 &lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;erb&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29 &lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30 &lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31 &lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32 &lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
   
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;</content><author><name>唐海宸</name></author><category term="222" /><summary type="html">第二个 This is my first post.Click the link below to go back to index: Go back 33333 第二个 第一个 jekyll安装指南</summary></entry><entry><title type="html">第一个</title><link href="http://localhost:4000/Blog/jekyll/2017/03/19/first-post.html" rel="alternate" type="text/html" title="第一个" /><published>2017-03-19T18:28:53+08:00</published><updated>2017-03-19T18:28:53+08:00</updated><id>http://localhost:4000/Blog/jekyll/2017/03/19/first-post</id><content type="html" xml:base="http://localhost:4000/Blog/jekyll/2017/03/19/first-post.html">&lt;h1&gt;第一个&lt;/h1&gt;
&lt;p&gt;This is my first post.Click the link below to go back to index:&lt;/p&gt;
&lt;!-- &lt;a href=&quot;&quot;&gt;Go back&lt;/a&gt; --&gt;
&lt;a href=&quot;/Blog/home.html&quot;&gt;33333&lt;/a&gt;
You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/</content><author><name>唐海宸</name></author><category term="111" /><summary type="html">第一个 This is my first post.Click the link below to go back to index: 33333 You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated. [jekyll-docs]: https://jekyllrb.com/docs/home [jekyll-gh]: https://github.com/jekyll/jekyll [jekyll-talk]: https://talk.jekyllrb.com/</summary></entry><entry><title type="html">jekyll安装指南</title><link href="http://localhost:4000/Blog/jekyll/2017/03/02/jekyll-install.html" rel="alternate" type="text/html" title="jekyll安装指南" /><published>2017-03-02T18:28:53+08:00</published><updated>2017-03-02T18:28:53+08:00</updated><id>http://localhost:4000/Blog/jekyll/2017/03/02/jekyll-install</id><content type="html" xml:base="http://localhost:4000/Blog/jekyll/2017/03/02/jekyll-install.html">&lt;div&gt;
    &lt;h4&gt;什么是node&lt;/h4&gt;
    &lt;p&gt;基于时间驱动的异步编程（我们在node环境下编写的js程序一般是异步程序）&lt;/p&gt;
    &lt;p&gt;node不是一门单独的语言，而是一个供js代码执行的环境。安装在服务器端，我们可以在服务器端用js编写程序。也就是说js不仅仅是在客户端的语言也是服务器端的语言&lt;/p&gt;
    &lt;h4&gt;node与浏览器&lt;/h4&gt;
    &lt;p&gt;node用的是谷歌的v8引擎来渲染js的(运行的速度快、稳定、编写的js不需要考虑兼容)&lt;/p&gt;
    &lt;p&gt;浏览器中的全局js对象是window，而node环境中的全局js对象是global。&lt;/p&gt;
    &lt;p&gt;浏览器是安装在客户端的。为了保护 客户端的安全，基本上不可能提供用js对客户电脑磁盘上的文件进行操作的功能。但是node环境中提供了对应的I/O(服务器上文件的操作)操作.我们使用js可以对服务器磁盘下的文件进行增删改查&lt;/p&gt;
    &lt;p&gt;dom浏览器提供的一些方法，yongjs来操作当前浏览器页面对应标签的元素&lt;/p&gt;
    &lt;p&gt;bom浏览器对象模型，让我们通过js操作跟浏览器相关的信息window.nabergeter.获取当前本地浏览器的版本信息&lt;/p&gt;
    &lt;h4&gt;node提供给js很多新的方法&lt;/h4&gt;
    &lt;p&gt;用来的服务器上进行操作：http.creatServer fs.writeFileSync fs.readFileSync等等
    &lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;h4&gt;node模块&lt;/h4&gt; 提供了一些方法供我们在node环境中使用 node模块分为三种
    &lt;div&gt;内置模块//http、fs、url……
        &lt;s&gt;http(createServer)&lt;/s&gt;
        &lt;s&gt;fs(writeFileSync、readFileSync……)&lt;/s&gt;
    &lt;/div&gt;
    &lt;h4&gt;createServer//创建一个服务&lt;/h4&gt;
    &lt;ul&gt;
        &lt;li&gt;server.listen(80,function(){})//变量server就是我们创建出来的这个服务。listen是监听80端口.为这个服务监听一个端口..当端口号监听成功之后执行函数(一般都是server is create success,listening on 80 port!)//&lt;/li&gt;
        &lt;li&gt;var server=http.createServer（function(){}）//里面并不是创建成功执行的函数。而是当客户端开始向服务端的当前服务(端口号为80的这个服务)发送一个请求，并且当前服务已经成功接受到这个请求后。执行这个回调函数。&lt;/li&gt;
        &lt;li&gt;该函数有（request,response）//request存放的是所有客户端的请求信息。包含客户端通过?传参的方式传递给服务器的数据内容&lt;/li&gt;
        &lt;li&gt;request.url存放的是客户端请求得文件资源的目录和名称以及传递给服务器的数据。例如:客户端请求的地址。我们服务端通过request.url获取到的是端口后的东西&lt;/li&gt;
        &lt;li&gt;//response提供了服务器端向客户端返回内容和数据的方法。&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div&gt;
        自定义模块(我们自己定义的模块)
        &lt;p&gt;创建一个js文件，这就是自定义模块。&lt;/p&gt;
        &lt;p&gt;var a=require('./a.js')//导入a模块使用 在a里面要写上module.exports={fn:fn}//输出模块fn模块。
        &lt;/p&gt;
        &lt;ul&gt;
            &lt;li&gt;当前项目下创建一个js文件就相当于一个js模块&lt;/li&gt;
            &lt;li&gt;如果需要提供一些方法给其他的模块使用，则需要通过modul.exports导出。&lt;/li&gt;
            &lt;li&gt;在b模块中使用需要先导入a模块。var a=require('.\a')&lt;/li&gt;
            &lt;li&gt;这样就可以调取a模块中的方法了.a.fn()&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div&gt;第三方模块(别人写好的模块/插件) 在NODE中使用别人的模块需要使用npm来进行管理(www.npmjs.com); 1、安装npm install 名称 -g(全局); 2.var less=require('./less');引入安装的less模块 就可以用了. 安装成功后用require把模块导入到js中。这样我们就可以使用模块中使用的方法了。
    &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;h4&gt;在服务创建成功后，如何向服务器端发送请求&lt;/h4&gt;
    &lt;ul&gt;
        &lt;li&gt;直接在浏览器输入http://localhost：80(80是http协议默认的端口)&lt;/li&gt;
        &lt;li&gt;在浏览器输入本机的ip地址&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;h4&gt;静态资源文件的请求和处理&lt;/h4&gt;
    &lt;ul&gt;
        &lt;li&gt;try catch 防止当前客户端请求文件不存在的时候，服务会终止。用其捕获异常信息，即使文件不存在，服务也不会报错，也不会终止。&lt;/li&gt;
        &lt;li&gt;处理静态资源文件请求。(html/css/js) //然后根据请求文件的后缀名获取当前文件的MIME类型(每一种资源文件都有自己的标识类型。html=&gt;(text/html)|css=&gt;(text/css)|text=&gt;(text/plain)); //浏览器会按照代码的MIME类型进行渲染。
        &lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;</content><author><name>唐海宸</name></author><category term="thc" /><summary type="html">什么是node 基于时间驱动的异步编程（我们在node环境下编写的js程序一般是异步程序） node不是一门单独的语言，而是一个供js代码执行的环境。安装在服务器端，我们可以在服务器端用js编写程序。也就是说js不仅仅是在客户端的语言也是服务器端的语言 node与浏览器 node用的是谷歌的v8引擎来渲染js的(运行的速度快、稳定、编写的js不需要考虑兼容) 浏览器中的全局js对象是window，而node环境中的全局js对象是global。 浏览器是安装在客户端的。为了保护 客户端的安全，基本上不可能提供用js对客户电脑磁盘上的文件进行操作的功能。但是node环境中提供了对应的I/O(服务器上文件的操作)操作.我们使用js可以对服务器磁盘下的文件进行增删改查 dom浏览器提供的一些方法，yongjs来操作当前浏览器页面对应标签的元素 bom浏览器对象模型，让我们通过js操作跟浏览器相关的信息window.nabergeter.获取当前本地浏览器的版本信息 node提供给js很多新的方法 用来的服务器上进行操作：http.creatServer fs.writeFileSync fs.readFileSync等等 node模块 提供了一些方法供我们在node环境中使用 node模块分为三种 内置模块//http、fs、url…… http(createServer) fs(writeFileSync、readFileSync……) createServer//创建一个服务 server.listen(80,function(){})//变量server就是我们创建出来的这个服务。listen是监听80端口.为这个服务监听一个端口..当端口号监听成功之后执行函数(一般都是server is create success,listening on 80 port!)// var server=http.createServer（function(){}）//里面并不是创建成功执行的函数。而是当客户端开始向服务端的当前服务(端口号为80的这个服务)发送一个请求，并且当前服务已经成功接受到这个请求后。执行这个回调函数。 该函数有（request,response）//request存放的是所有客户端的请求信息。包含客户端通过?传参的方式传递给服务器的数据内容 request.url存放的是客户端请求得文件资源的目录和名称以及传递给服务器的数据。例如:客户端请求的地址。我们服务端通过request.url获取到的是端口后的东西 //response提供了服务器端向客户端返回内容和数据的方法。 自定义模块(我们自己定义的模块) 创建一个js文件，这就是自定义模块。 var a=require('./a.js')//导入a模块使用 在a里面要写上module.exports={fn:fn}//输出模块fn模块。 当前项目下创建一个js文件就相当于一个js模块 如果需要提供一些方法给其他的模块使用，则需要通过modul.exports导出。 在b模块中使用需要先导入a模块。var a=require('.\a') 这样就可以调取a模块中的方法了.a.fn() 第三方模块(别人写好的模块/插件) 在NODE中使用别人的模块需要使用npm来进行管理(www.npmjs.com); 1、安装npm install 名称 -g(全局); 2.var less=require('./less');引入安装的less模块 就可以用了. 安装成功后用require把模块导入到js中。这样我们就可以使用模块中使用的方法了。 在服务创建成功后，如何向服务器端发送请求 直接在浏览器输入http://localhost：80(80是http协议默认的端口) 在浏览器输入本机的ip地址 静态资源文件的请求和处理 try catch 防止当前客户端请求文件不存在的时候，服务会终止。用其捕获异常信息，即使文件不存在，服务也不会报错，也不会终止。 处理静态资源文件请求。(html/css/js) //然后根据请求文件的后缀名获取当前文件的MIME类型(每一种资源文件都有自己的标识类型。html=&gt;(text/html)|css=&gt;(text/css)|text=&gt;(text/plain)); //浏览器会按照代码的MIME类型进行渲染。</summary></entry></feed>